name: Release

on:
  push:
    branches:
      - main
      - ssh
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # macOS builds - standard and SSH (updated with OpenSSL config)
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: dedups-macos-x86_64
            binary_name: dedups
            features: ""
            features_flag: ""
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: dedups-macos-x86_64-ssh
            binary_name: dedups
            features: "all"
            features_flag: "--features all"
            openssl_needed: true  # Flag for SSH builds requiring OpenSSL

          # macOS ARM builds (updated cross-compilation config)
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: dedups-macos-aarch64
            binary_name: dedups
            features: ""
            features_flag: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: dedups-macos-aarch64-ssh
            binary_name: dedups
            features: "ssh"
            features_flag: "--features ssh"
            openssl_needed: true

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust targets
        run: |
          rustup target add ${{ matrix.target }}
      
      # Install OpenSSL for macOS SSH builds
      - name: Install OpenSSL (macOS)
        if: matrix.os == 'macos-latest' && matrix.openssl_needed
        run: |
          brew update
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.target }}
      
      # Modified build steps with OpenSSL environment
      - name: Build (macOS x86_64)
        if: matrix.os == 'macos-latest' && matrix.target == 'x86_64-apple-darwin'
        run: |
          cargo build --release --target ${{ matrix.target }} ${{ matrix.features_flag }}
        env:
          RUSTFLAGS: "-C target-cpu=native"
          OPENSSL_DIR: ${{ env.OPENSSL_DIR }}
          PKG_CONFIG_ALLOW_CROSS: ${{ env.PKG_CONFIG_ALLOW_CROSS }}
      
      - name: Build (macOS ARM)
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          cargo build --release --target ${{ matrix.target }} ${{ matrix.features_flag }}
        env:
          RUSTFLAGS: "-C target-feature=+aes,+neon"
          OPENSSL_DIR: ${{ env.OPENSSL_DIR }}
          PKG_CONFIG_ALLOW_CROSS: ${{ env.PKG_CONFIG_ALLOW_CROSS }}

      # Existing artifact preparation and upload steps remain unchanged
      - name: Prepare artifact
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          cp ${{ matrix.binary_name }} ${{ matrix.artifact_name }}
          strip ${{ matrix.artifact_name }}
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  # Existing release job remains unchanged
  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dedups-macos-x86_64
            dedups-macos-x86_64-ssh
            dedups-macos-aarch64
            dedups-macos-aarch64-ssh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
