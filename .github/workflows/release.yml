name: Release

on:
  push:
    branches:
      - main
      - ssh
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux builds - standard and SSH
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: dedups-linux-x86_64
            binary_name: dedups
            features: ""
            features_flag: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: dedups-linux-x86_64-ssh
            binary_name: dedups
            features: "all"
            features_flag: "--features all"
          
          # macOS builds - standard and SSH
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: dedups-macos-x86_64
            binary_name: dedups
            features: ""
            features_flag: ""
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: dedups-macos-x86_64-ssh
            binary_name: dedups
            features: "all"
            features_flag: "--features all"
          
          # macOS ARM builds - standard and SSH
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: dedups-macos-aarch64
            binary_name: dedups
            features: ""
            features_flag: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: dedups-macos-aarch64-ssh
            binary_name: dedups
            features: "ssh"
            features_flag: "--features ssh"
          
          # Windows builds - standard and SSH
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: dedups-windows-x86_64.exe
            binary_name: dedups.exe
            features: ""
            features_flag: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: dedups-windows-x86_64-ssh.exe
            binary_name: dedups.exe
            features: "ssh"
            features_flag: "--features ssh"

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.target }}
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install Linux development dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config

      # Set up cross-compilation for ARM on macOS
      - name: Install cross-compilation tools for macOS ARM
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          rustup target add aarch64-apple-darwin
      
      # Build with Linux-specific flags
      - name: Build (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo build --release --target ${{ matrix.target }} ${{ matrix.features_flag }}
        env:
          RUSTFLAGS: "-C target-cpu=native"
      
      # Build with macOS ARM flags
      - name: Build (macOS ARM)
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          cargo build --release --target ${{ matrix.target }} ${{ matrix.features_flag }}
        env:
          RUSTFLAGS: "-C target-feature=+aes,+neon"
      
      # Standard build for other platforms
      - name: Build (Standard)
        if: matrix.os != 'ubuntu-latest' && matrix.target != 'aarch64-apple-darwin'
        run: |
          cargo build --release --target ${{ matrix.target }} ${{ matrix.features_flag }}
      
      # Prepare artifact on Linux/macOS
      - name: Prepare artifact
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          cp ${{ matrix.binary_name }} ${{ matrix.artifact_name }}
          strip ${{ matrix.artifact_name }}
      
      # Prepare artifact on Windows (no strip command)
      - name: Prepare artifact (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          cp ${{ matrix.binary_name }} ${{ matrix.artifact_name }}
      
      # Upload the artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          if-no-files-found: error

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Move all artifacts to root
        run: |
          for dir in artifacts/*/; do
            cp "$dir"/* .
          done
          ls -la
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dedups-linux-x86_64
            dedups-linux-x86_64-ssh
            dedups-macos-x86_64
            dedups-macos-x86_64-ssh
            dedups-macos-aarch64
            dedups-macos-aarch64-ssh
            dedups-windows-x86_64.exe
            dedups-windows-x86_64-ssh.exe
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
