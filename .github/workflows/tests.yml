name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        override: true
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    # Install system dependencies
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config docker.io

    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install openssl@3 docker
        echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV

    # Start Docker service on Linux
    - name: Start Docker service
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo systemctl start docker
        sudo docker --version
    
    - name: Check formatting
      run: cargo fmt -- --check
    
    - name: Clippy
      run: cargo clippy -- -D warnings
    
    # Run standard tests (OS-specific)
    - name: Run tests (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: cargo test --features linux
      env:
        RUSTFLAGS: "-C target-cpu=native"

    - name: Run tests (macOS)
      if: matrix.os == 'macos-latest'
      run: cargo test --features linux

    - name: Run tests (Windows)
      if: matrix.os == 'windows-latest'
      run: cargo test

    # Run SSH integration tests on Linux and macOS
    - name: Run SSH integration tests (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        # Build test container
        docker build -t dedups-test -f Dockerfile.test .
        
        # Set up test environment
        chmod +x test_env/setup_test_env.sh
        ./test_env/setup_test_env.sh
        
        # Run SSH tests
        cargo test --features ssh --test ssh_integration_tests -- --ignored --nocapture
      env:
        DOCKER_BUILDKIT: 1

    # Run standard integration tests (OS-specific)
    - name: Run integration tests (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: cargo test --test '*' --features linux
      env:
        RUSTFLAGS: "-C target-cpu=native"

    - name: Run integration tests (macOS)
      if: matrix.os == 'macos-latest'
      run: cargo test --test '*' --features linux

    - name: Run integration tests (Windows)
      if: matrix.os == 'windows-latest'
      run: cargo test --test '*' --features test_mode 