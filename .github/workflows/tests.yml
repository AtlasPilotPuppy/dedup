name: Tests

on:
  push:
    branches: ['*']
  pull_request:
    branches: [ main, beta ]

jobs:
  basic-tests:
    name: Basic Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        override: true
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    # Install system dependencies
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config netcat-openbsd coreutils libsdl2-dev libsdl2-image-dev protobuf-compiler

    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install openssl@3 netcat coreutils sdl2 sdl2_image protobuf
        echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
    
    - name: Check formatting
      run: cargo fmt -- --check
    
    - name: Clippy
      run: cargo clippy -- -D warnings
    
    # Run standard tests (OS-specific)
    - name: Run tests (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: cargo test --features linux
      env:
        RUSTFLAGS: "-C target-cpu=native"

    - name: Run tests (macOS)
      if: matrix.os == 'macos-latest'
      run: cargo test --features linux

    - name: Run tests (Windows)
      if: matrix.os == 'windows-latest'
      run: cargo test

    # Run protocol tests on Unix systems
    - name: Run protocol tests (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x test_protocol.sh
        chmod +x test_protocol_perf.sh
        ./test_protocol.sh
        ./test_protocol_perf.sh

  docker-tests:
    name: Docker Tests
    needs: basic-tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        override: true
    
    - name: Install Docker
      run: |
        sudo apt-get update
        sudo apt-get install -y ca-certificates curl gnupg
        sudo install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        sudo chmod a+r /etc/apt/keyrings/docker.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
        sudo systemctl start docker
        sudo docker --version

    # Run SSH integration tests
    - name: Run SSH integration tests
      run: |
        # Build and start test container
        docker build -t dedups-test -f Dockerfile.test .
        docker run -d --name dedups-test-container -p 2222:22 dedups-test
        
        # Wait for SSH to be ready
        attempts=0
        while ! nc -z localhost 2222 && [ $attempts -lt 15 ]; do
          sleep 1
          ((attempts++))
        done
        
        # Set up SSH key
        mkdir -p ~/.ssh
        ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -N ""
        
        # Fix permissions on SSH keys
        chmod 600 ~/.ssh/id_ed25519
        chmod 644 ~/.ssh/id_ed25519.pub
        
        # Add container to known hosts
        ssh-keyscan -p 2222 localhost >> ~/.ssh/known_hosts
        
        # Copy SSH key to container
        docker cp ~/.ssh/id_ed25519.pub dedups-test-container:/home/testuser/.ssh/authorized_keys
        docker exec dedups-test-container bash -c "chown testuser:testuser /home/testuser/.ssh/authorized_keys && chmod 600 /home/testuser/.ssh/authorized_keys"
        
        # Create test files
        docker exec dedups-test-container bash -c "mkdir -p /home/testuser/test_data && touch /home/testuser/test_data/test1.txt /home/testuser/test_data/test2.txt"
        
        # Run SSH tests
        cargo test --features ssh --test ssh_integration_tests
        cargo test --features ssh --test ssh_json_streaming_test
        
        # Run SSH tests with Protocol Buffers feature
        cargo test --features "ssh,proto" --test ssh_integration_tests
        cargo test --features "ssh,proto" --test ssh_json_streaming_test

  tunnel-api-test:
    name: Tunnel API Integration
    needs: basic-tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        override: true
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config netcat-openbsd
    
    - name: Run Tunnel API integration test
      run: |
        cargo test --features "ssh,proto" --test tunnel_api_integration -- --ignored
      env:
        # Enable the tunnel API test specifically
        DEDUPS_SSH_TEST: 1
        # Set larger timeout for CI environment
        RUST_TEST_THREADS: 1 